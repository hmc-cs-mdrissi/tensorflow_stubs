from typing import AnyStr, Generic, Literal, overload

from collections.abc import Callable, Iterable
from types import TracebackType

def rmtree(path: str) -> None: ...
def isdir(path: str) -> bool: ...
def listdir(path: str) -> list[str]: ...
def exists(path: str) -> bool: ...
def copy(src: str, dst: str, overwrite: bool = False) -> None: ...
def makedirs(path: str) -> None: ...
def glob(pattern: str | Iterable[str]) -> list[str]: ...
def walk(top: str, topdown: bool = True, onerror: Callable[[Exception], object] | None = None): ...

class GFile(Generic[AnyStr]):
    @overload
    def __new__(cls, name: str, mode: Literal["r", "w"]) -> GFile[str]: ...
    @overload
    def __new__(cls, name: str, mode: Literal["rb", "wb"]) -> GFile[bytes]: ...
    def readlines(self) -> list[AnyStr]: ...
    def read(self) -> AnyStr: ...
    def write(self, file_content: AnyStr) -> None: ...
    def __enter__(self) -> GFile[AnyStr]: ...
    def __exit__(
        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None
    ) -> None: ...
